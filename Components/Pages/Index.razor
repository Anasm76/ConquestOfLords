@using ConquestOfLords.Data
@using Microsoft.EntityFrameworkCore
@page "/"
@inject ConquestOfLords.Data.AppDbContext Db
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>CoL Event Registration</PageTitle>

<div class="container mt-3">
    <h2>Conquest of Lords Event Registration</h2>

    <div class="btn-group mb-3" role="group">
        <button class="btn @(!isNewRegistration ? "btn-primary" : "btn-outline-primary")"
                @onclick="() => SwitchMode(false)">
            Update Registration
        </button>
        <button class="btn @(isNewRegistration ? "btn-primary" : "btn-outline-primary")"
                @onclick="() => SwitchMode(true)">
            New Registration
        </button>
    </div>

    @if (!isNewRegistration)
    {
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group">
                    <input type="text" class="form-control" @bind="accessCodeInput"
                           placeholder="Enter your access code" autocomplete="on" name="access-code" id="access-code" maxlength="6" />
                    <button class="btn btn-primary" @onclick="LoadExistingPlayer">
                        Load Details
                    </button>
                </div>
                <div class="text-muted mt-1">
                    Don't have a code? Click "New Registration" above
                </div>
                @if (!string.IsNullOrEmpty(loadMessage))
                {
                    <div class="alert alert-@loadMessageType py-1 mt-2">@loadMessage</div>
                }
            </div>
        </div>
    }

    @if (isNewRegistration || (!isNewRegistration && playerLoaded))
    {
        <div class="row">
            <div class="col-md-8">
                <EditForm Model="@player" OnValidSubmit="HandleSubmit" FormName="registration">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row g-2">
                        <div class="col-md-6">
                            <div class="form-floating mb-2">
                                <InputText @bind-Value="player.InGameName" class="form-control" id="inGameName" />
                                <label for="inGameName">In-Game Name</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-floating mb-2">
                                <InputText @bind-Value="player.Alliance" class="form-control" id="alliance" maxlength="3" />
                                <label for="alliance">Alliance (3 letters)</label>
                            </div>
                        </div>
                    </div>

                    <div class="row g-2">
                        <div class="col-md-6">
                            <div class="form-floating mb-2">
                                <InputSelect @bind-Value="player.TroopType" class="form-select" id="troopType">
                                    @foreach (var type in Enum.GetValues<TroopType>())
                                    {
                                        <option value="@type">@type</option>
                                    }
                                </InputSelect>
                                <label for="troopType">Troop Type - Highest you have</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-floating mb-2">
                                <InputSelect @bind-Value="player.TroopLevel" class="form-select" id="troopLevel">
                                    <option value="9">T9</option>
                                    <option value="10">T10</option>
                                    <option value="11">T11</option>
                                </InputSelect>
                                <label for="troopLevel">Troop Level - Highest you have even if not full march</label>
                            </div>
                        </div>
                    </div>

                    <div class="row g-2">
                        <div class="col-md-6">
                            <div class="form-floating mb-2">
                                <InputNumber @bind-Value="player.TroopCapacity" class="form-control" id="troopCapacity" />
                                <label for="troopCapacity">Troop Capacity</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-floating mb-2">
                                <InputNumber @bind-Value="player.RallySize" class="form-control" id="rallySize" />
                                <label for="rallySize">Rally Size - Only required if you want to captain</label>
                            </div>
                        </div>
                    </div>

                    <div class="row g-2">
                        <div class="col-md-6">
                            <div class="form-floating mb-2">
                                <InputNumber @bind-Value="player.MaxDenLevel" class="form-control" id="maxDenLevel" />
                                <label for="maxDenLevel">Highest Den you have ever solo'd </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-floating mb-2">
                                <InputSelect @bind-Value="player.PreferredShift" class="form-select" id="preferredShift">
                                    <option value="1">Shift 1 (First 4 hours)</option>
                                    <option value="2">Shift 2 (Last 4 hours)</option>
                                    <option value="3">Both Shifts</option>
                                </InputSelect>
                                <label for="preferredShift">Preferred Shift</label>
                            </div>
                        </div>
                    </div>

                    <div class="row g-2 mt-2">
                        <div class="col-md-6">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="player.IsAvailableExtendedHours" class="form-check-input" id="extendedHours" />
                                <label class="form-check-label" for="extendedHours">
                                    Available for Extended Hours
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="player.IsWillingToCaptain" class="form-check-input" id="captain" />
                                <label class="form-check-label" for="captain">
                                    Willing to be Captain
                                </label>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert alert-@messageType py-2 mt-3" role="alert">
                            @message
                        </div>
                    }

                    <div class="mt-3">
                        <button type="submit" class="btn btn-primary">
                            @(isNewRegistration ? "Register" : "Update")
                        </button>
                    </div>
                </EditForm>
            </div>

            @if (!string.IsNullOrEmpty(accessCode))
            {
                <div class="col-md-4">
                    <div class="alert alert-success">
                        <h5>Registration Successful!</h5>
                        <p class="mb-0">
                            Your access code is: <strong>@accessCode</strong>
                            <br />
                            Please save this code - you'll need it to update your information later.
                        </p>
                    </div>
                </div>
            }
        </div>
    }

    @* Leader Section - Only visible when the logged-in player is a leader *@
    @if (playerLoaded && player.IsLeader)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Alliance Members - @player.Alliance</h4>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="showActiveOnly" @bind="showActivePlayersOnly" />
                            <label class="form-check-label text-white" for="showActiveOnly">Show active players only</label>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Note:</strong> You can toggle player participation by clicking the checkbox in the Active column.
                        </div>

                        @if (allianceMembers.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th class="sortable" @onclick="() => SortBy(nameof(Player.InGameName))">
                                                <div class="d-flex align-items-center">
                                                    In-Game Name
                                                    <span class="sort-indicator">@(GetSortIndicator(nameof(Player.InGameName)))</span>
                                                </div>
                                            </th>
                                            <th class="sortable" @onclick="() => SortBy(nameof(Player.TroopType))">
                                                <div class="d-flex align-items-center">
                                                    Troop Type
                                                    <span class="sort-indicator">@(GetSortIndicator(nameof(Player.TroopType)))</span>
                                                </div>
                                            </th>
                                            <th class="sortable" @onclick="() => SortBy(nameof(Player.TroopLevel))">
                                                <div class="d-flex align-items-center">
                                                    Level
                                                    <span class="sort-indicator">@(GetSortIndicator(nameof(Player.TroopLevel)))</span>
                                                </div>
                                            </th>
                                            <th class="sortable" @onclick="() => SortBy(nameof(Player.TroopCapacity))">
                                                <div class="d-flex align-items-center">
                                                    Capacity
                                                    <span class="sort-indicator">@(GetSortIndicator(nameof(Player.TroopCapacity)))</span>
                                                </div>
                                            </th>
                                            <th class="sortable" @onclick="() => SortBy(nameof(Player.RallySize))">
                                                <div class="d-flex align-items-center">
                                                    Rally Size
                                                    <span class="sort-indicator">@(GetSortIndicator(nameof(Player.RallySize)))</span>
                                                </div>
                                            </th>
                                            <th class="sortable" @onclick="() => SortBy(nameof(Player.PreferredShift))">
                                                <div class="d-flex align-items-center">
                                                    Shift
                                                    <span class="sort-indicator">@(GetSortIndicator(nameof(Player.PreferredShift)))</span>
                                                </div>
                                            </th>
                                            <th>Extended</th>
                                            <th>Captain</th>
                                            <th class="sortable" @onclick="() => SortBy(nameof(Player.IsParticipating))">
                                                <div class="d-flex align-items-center">
                                                    Active
                                                    <span class="sort-indicator">@(GetSortIndicator(nameof(Player.IsParticipating)))</span>
                                                </div>
                                            </th>
                                            <th>Access Code</th>
                                            <th class="sortable" @onclick="() => SortBy(nameof(Player.LastUpdated))">
                                                <div class="d-flex align-items-center">
                                                    Last Updated
                                                    <span class="sort-indicator">@(GetSortIndicator(nameof(Player.LastUpdated)))</span>
                                                </div>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var member in FilterAndSortPlayers(allianceMembers))
                                        {
                                            <tr>
                                                <td>@member.InGameName</td>
                                                <td>@member.TroopType</td>
                                                <td>T@(member.TroopLevel)</td>
                                                <td>@member.TroopCapacity.ToString("N0")</td>
                                                <td>@member.RallySize.ToString("N0")</td>
                                                <td>@member.PreferredShift</td>
                                                <td>@(member.IsAvailableExtendedHours ? "Yes" : "No")</td>
                                                <td>@(member.IsWillingToCaptain ? "Yes" : "No")</td>
                                                <td>
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input"
                                                               checked="@member.IsParticipating"
                                                               @onchange="async (e) => await ToggleParticipation(member, e.Value)" />
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="text-primary" role="button" style="cursor: pointer" @onclick="() => CopyInviteCode(member.AccessCode)">
                                                        @member.AccessCode
                                                    </span>
                                                </td>
                                                <td>@member.LastUpdated.ToString("g")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                No alliance members found. As players from your alliance register, they will appear here.
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .sortable {
        cursor: pointer;
        user-select: none;
    }

        .sortable:hover {
            background-color: rgba(0,0,0,0.05);
        }

    .sort-indicator {
        display: inline-block;
        margin-left: 0.25rem;
    }
</style>

@code {
    private bool isNewRegistration = false;
    private bool playerLoaded = false;
    private Player player = new();
    private string message = "";
    private string messageType = "";
    private string accessCode = "";
    private string accessCodeInput = "";
    private string loadMessage = "";
    private string loadMessageType = "";
    private List<Player> allianceMembers = new();
    private string currentSortColumn = "LastUpdated";
    private bool isAscending = false;
    private bool showActivePlayersOnly = true; // Default to showing only active players

    protected override void OnInitialized()
    {
        // Set default values but don't show form initially
        player = new Player
            {
                TroopLevel = 7,
                PreferredShift = 1
            };
    }

    private void SwitchMode(bool newRegistration)
    {
        isNewRegistration = newRegistration;
        // Reset states when switching modes
        message = "";
        loadMessage = "";
        playerLoaded = false;
        accessCodeInput = "";
        if (newRegistration)
        {
            player = new Player
                {
                    TroopLevel = 7,
                    PreferredShift = 1
                };
        }
    }

    private async Task LoadExistingPlayer()
    {
        playerLoaded = false;
        allianceMembers.Clear();

        if (string.IsNullOrWhiteSpace(accessCodeInput))
        {
            loadMessage = "Please enter an access code";
            loadMessageType = "warning";
            return;
        }

        var existingPlayer = await Db.Players
            .FirstOrDefaultAsync(p => p.AccessCode == accessCodeInput.Trim().ToUpper());

        if (existingPlayer == null)
        {
            loadMessage = "No player found with this access code";
            loadMessageType = "danger";
            return;
        }

        player = existingPlayer;
        playerLoaded = true;
        loadMessage = "Player details loaded successfully";
        loadMessageType = "success";

        // If the player is a leader, load alliance members
        if (player.IsLeader)
        {
            await LoadAllianceMembers();
        }
    }

    private async Task LoadAllianceMembers()
    {
        if (string.IsNullOrEmpty(player.Alliance))
            return;

        allianceMembers = await Db.Players
            .Where(p => p.Alliance == player.Alliance)
            .OrderByDescending(p => p.LastUpdated)
            .ToListAsync();
    }

    private async Task HandleSubmit()
    {
        try
        {
            // Validation
            if (string.IsNullOrWhiteSpace(player.InGameName))
            {
                message = "In-Game Name is required";
                messageType = "danger";
                return;
            }

            if (string.IsNullOrWhiteSpace(player.Alliance))
            {
                message = "Alliance tag is required";
                messageType = "danger";
                return;
            }

            if (player.Alliance.Length != 3)
            {
                message = "Alliance tag must be exactly 3 letters";
                messageType = "danger";
                return;
            }

            if (player.TroopCapacity < 10000)
            {
                message = "Minimum troop capacity is 10,000";
                messageType = "danger";
                return;
            }

            // Convert alliance to uppercase
            player.Alliance = player.Alliance.ToUpper();
            player.IsParticipating = true;

            if (isNewRegistration)
            {
                // Generate new access code only for new registrations
                player.AccessCode = GenerateAccessCode();
                await Db.Players.AddAsync(player);
            }
            else
            {
                // For updates, just update the LastUpdated timestamp
                player.LastUpdated = DateTime.UtcNow;
                Db.Players.Update(player);

                // If player is a leader, refresh alliance members
                if (player.IsLeader)
                {
                    await LoadAllianceMembers();
                }
            }

            await Db.SaveChangesAsync();

            accessCode = player.AccessCode;
            message = isNewRegistration ? "Registration successful!" : "Update successful!";
            messageType = "success";

            if (isNewRegistration)
            {
                // Only reset form for new registrations
                player = new()
                    {
                        TroopLevel = 7,
                        PreferredShift = 1
                    };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            message = isNewRegistration
                ? "Error saving registration. The in-game name might already be taken."
                : "Error updating registration.";
            messageType = "danger";
        }
    }

    private static string GenerateAccessCode()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, 6)
            .Select(s => s[Random.Shared.Next(s.Length)]).ToArray());
    }

    // Sorting functionality for alliance member table
    private string GetSortIndicator(string column)
    {
        if (currentSortColumn != column) return "";
        return isAscending ? "↑" : "↓";
    }

    private void SortBy(string column)
    {
        if (currentSortColumn == column)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = true;
        }
        StateHasChanged();
    }

    private IEnumerable<Player> FilterAndSortPlayers(IEnumerable<Player> players)
    {
        // First apply the active filter if needed
        var filteredPlayers = showActivePlayersOnly
            ? players.Where(p => p.IsParticipating).ToList()
            : players.ToList();

        // Then apply sorting
        return SortPlayers(filteredPlayers);
    }

    private IOrderedEnumerable<Player> SortPlayers(IEnumerable<Player> players)
    {
        return currentSortColumn switch
        {
            "InGameName" => isAscending
                ? players.OrderBy(p => p.InGameName)
                : players.OrderByDescending(p => p.InGameName),
            "TroopType" => isAscending
                ? players.OrderBy(p => p.TroopType)
                : players.OrderByDescending(p => p.TroopType),
            "TroopLevel" => isAscending
                ? players.OrderBy(p => p.TroopLevel)
                : players.OrderByDescending(p => p.TroopLevel),
            "TroopCapacity" => isAscending
                ? players.OrderBy(p => p.TroopCapacity)
                : players.OrderByDescending(p => p.TroopCapacity),
            "RallySize" => isAscending
                ? players.OrderBy(p => p.RallySize)
                : players.OrderByDescending(p => p.RallySize),
            "PreferredShift" => isAscending
                ? players.OrderBy(p => p.PreferredShift)
                : players.OrderByDescending(p => p.PreferredShift),
            "IsParticipating" => isAscending
                ? players.OrderBy(p => p.IsParticipating)
                : players.OrderByDescending(p => p.IsParticipating),
            "LastUpdated" => isAscending
                ? players.OrderBy(p => p.LastUpdated)
                : players.OrderByDescending(p => p.LastUpdated),
            _ => players.OrderByDescending(p => p.LastUpdated)
        };
    }

    private async Task ToggleParticipation(Player memberPlayer, object? isChecked)
    {
        if (isChecked is bool isParticipating)
        {
            // Find the player in the database and update
            var dbPlayer = await Db.Players.FindAsync(memberPlayer.Id);
            if (dbPlayer != null)
            {
                dbPlayer.IsParticipating = isParticipating;
                dbPlayer.LastUpdated = DateTime.UtcNow;
                await Db.SaveChangesAsync();

                // Update the local list
                var index = allianceMembers.FindIndex(p => p.Id == memberPlayer.Id);
                if (index >= 0)
                {
                    allianceMembers[index].IsParticipating = isParticipating;
                    allianceMembers[index].LastUpdated = DateTime.UtcNow;
                }
            }
        }
    }

    private async Task CopyInviteCode(string accessCode)
    {
        var text = $"Your code for CoL is {accessCode} and the URL is https://rb.gy/kdbdyg";
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }
}