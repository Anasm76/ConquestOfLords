@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using ConquestOfLords.Data
@using Microsoft.EntityFrameworkCore
@using System.Linq
@page "/admin"
<style>
    .sortable {
        cursor: pointer;
        user-select: none;
    }

        .sortable:hover {
            background-color: rgba(0,0,0,0.05);
        }

    .sort-indicator {
        display: inline-block;
        margin-left: 0.25rem;
    }
</style>
@using ConquestOfLords.Data
@using Microsoft.EntityFrameworkCore
@using System.Text
@inject IConfiguration Configuration
@inject AppDbContext Db
@rendermode InteractiveServer

<PageTitle>CoL Event Admin</PageTitle>
<div class="modal @(isConfirmDialogVisible ? "show d-block" : "d-none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Action</h5>
                <button type="button" class="btn-close" @onclick="CancelConfirmation"></button>
            </div>
            <div class="modal-body">
                <p>@confirmationMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CancelConfirmation">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmAction">Delete</button>
            </div>
        </div>
    </div>
</div>

@if (isConfirmDialogVisible)
{
    <div class="modal-backdrop show"></div>
}
@if (!isAuthenticated)
{
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h3 class="card-title">Admin Login</h3>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <input type="password" class="form-control" @bind="password" @onkeypress="HandleKeyPress" />
                        </div>
                        @if (!string.IsNullOrEmpty(message))
                        {
                            <div class="alert alert-danger">@message</div>
                        }
                        <button class="btn btn-primary" @onclick="Authenticate">Login</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid mt-4">
        <h2>Event Administration</h2>

        <div class="row mb-4">
            <div class="col">
                <div class="btn-group">

                    <button class="btn btn-primary" @onclick="GenerateTeams">
                        Generate Teams
                    </button>
                    @if (!string.IsNullOrEmpty(generatedAssignments))
                    {
                        <button class="btn btn-success" @onclick="SaveAssignments">
                            Save Assignments
                        </button>
                    }
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(generatedAssignments))
        {
            <div class="row mb-4">
                <div class="col">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Generated Team Assignments</h5>
                        </div>
                        <div class="card-body">
                            <textarea class="form-control" rows="20" @bind="generatedAssignments"></textarea>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th class="sortable" @onclick="() => SortBy(nameof(Player.InGameName))">
                            <div class="d-flex align-items-center">
                                In-Game Name
                                <span class="sort-indicator">@(GetSortIndicator(nameof(Player.InGameName)))</span>
                            </div>
                        </th>
                        <th class="sortable" @onclick="() => SortBy(nameof(Player.Alliance))">
                            <div class="d-flex align-items-center">
                                Alliance
                                <span class="sort-indicator">@(GetSortIndicator(nameof(Player.Alliance)))</span>
                            </div>
                        </th>
                        <th class="sortable" @onclick="() => SortBy(nameof(Player.TroopType))">
                            <div class="d-flex align-items-center">
                                Troop Type
                                <span class="sort-indicator">@(GetSortIndicator(nameof(Player.TroopType)))</span>
                            </div>
                        </th>
                        <th class="sortable" @onclick="() => SortBy(nameof(Player.TroopLevel))">
                            <div class="d-flex align-items-center">
                                Level
                                <span class="sort-indicator">@(GetSortIndicator(nameof(Player.TroopLevel)))</span>
                            </div>
                        </th>
                        <th class="sortable" @onclick="() => SortBy(nameof(Player.TroopCapacity))">
                            <div class="d-flex align-items-center">
                                Capacity
                                <span class="sort-indicator">@(GetSortIndicator(nameof(Player.TroopCapacity)))</span>
                            </div>
                        </th>
                        <th class="sortable" @onclick="() => SortBy(nameof(Player.RallySize))">
                            <div class="d-flex align-items-center">
                                Rally Size
                                <span class="sort-indicator">@(GetSortIndicator(nameof(Player.RallySize)))</span>
                            </div>
                        </th>
                        <th class="sortable" @onclick="() => SortBy(nameof(Player.MaxDenLevel))">
                            <div class="d-flex align-items-center">
                                Max Den
                                <span class="sort-indicator">@(GetSortIndicator(nameof(Player.MaxDenLevel)))</span>
                            </div>
                        </th>
                        <th class="sortable" @onclick="() => SortBy(nameof(Player.PreferredShift))">
                            <div class="d-flex align-items-center">
                                Shift
                                <span class="sort-indicator">@(GetSortIndicator(nameof(Player.PreferredShift)))</span>
                            </div>
                        </th>
                        <th>Extended</th>
                        <th>Captain</th>
                        <th class="sortable" @onclick="() => SortBy(nameof(Player.IsParticipating))">
                            <div class="d-flex align-items-center">
                                Active
                                <span class="sort-indicator">@(GetSortIndicator(nameof(Player.IsParticipating)))</span>
                            </div>
                        </th>
                        <th>Access Code</th>
                        <th class="sortable" @onclick="() => SortBy(nameof(Player.LastUpdated))">
                            <div class="d-flex align-items-center">
                                Last Updated
                                <span class="sort-indicator">@(GetSortIndicator(nameof(Player.LastUpdated)))</span>
                            </div>
                        </th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in SortPlayers(players))
                    {
                        <tr>
                            <td>@player.InGameName</td>
                            <td>@player.Alliance</td>
                            <td>@player.TroopType</td>
                            <td>T@(player.TroopLevel)</td>
                            <td>@player.TroopCapacity.ToString("N0")</td>
                            <td>@player.RallySize.ToString("N0")</td>
                            <td>@player.MaxDenLevel</td>
                            <td>@player.PreferredShift</td>
                            <td>@(player.IsAvailableExtendedHours ? "Yes" : "No")</td>
                            <td>@(player.IsWillingToCaptain ? "Yes" : "No")</td>
                            <td>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input"
                                           checked="@player.IsParticipating"
                                           @onchange="async (e) => await ToggleParticipation(player, e.Value)" />
                                </div>
                            </td>
                            <td>
                                <span class="text-primary" role="button" style="cursor: pointer" @onclick="() => CopyInviteCode(player.AccessCode)">
                                    @player.AccessCode
                                </span>
                            </td>
                            <td>@player.LastUpdated.ToString("g")</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeletePlayer(player)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private bool isAuthenticated;
    private string password = "";
    private string message = "";
    private List<Player> players = new();
    private string generatedAssignments = "";
    private string? saveMessage;
    private string saveMessageType = "success";
    private TeamAssignment? currentAssignment;
    private string currentSortColumn = "LastUpdated";
    private bool isAscending = false;
    private bool isConfirmDialogVisible = false;
    private string confirmationMessage = "";
    private Player? playerToDelete;
    private TaskCompletionSource<bool>? confirmationTcs;

    public class Team
    {
        public Player Captain { get; set; } = null!;
        public List<Player> Members { get; } = new();
        public TroopType TroopType => Captain.TroopType;
        public int ShiftNumber => Captain.PreferredShift;
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshPlayers();
        if (isAuthenticated)
        {
            await LoadCurrentAssignment();
        }
    }

    private async Task RefreshPlayers()
    {
        if (isAuthenticated)
        {
            players = await Db.Players
                .OrderByDescending(p => p.LastUpdated)
                .ToListAsync();
        }
    }
    private async Task LoadCurrentAssignment()
    {
        currentAssignment = await Db.TeamAssignments
            .Where(ta => ta.IsActive)
            .OrderByDescending(ta => ta.CreatedAt)
            .FirstOrDefaultAsync();

        if (currentAssignment != null)
        {
            generatedAssignments = currentAssignment.AssignmentText;
        }
    }
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Authenticate();
        }
    }
    private string GetSortIndicator(string column)
    {
        if (currentSortColumn != column) return "";
        return isAscending ? "↑" : "↓";
    }
    private Task Authenticate()
    {
        var adminPassword = Configuration["AdminSettings:Password"];
        if (password == adminPassword)
        {
            isAuthenticated = true;
            message = "";
            return RefreshPlayers();
        }

        message = "Invalid password";
        password = "";
        return Task.CompletedTask;
    }
    private IOrderedEnumerable<Player> SortPlayers(IEnumerable<Player> players)
    {
        return currentSortColumn switch
        {
            "InGameName" => isAscending
                ? players.OrderBy(p => p.InGameName)
                : players.OrderByDescending(p => p.InGameName),
            "Alliance" => isAscending
                ? players.OrderBy(p => p.Alliance)
                : players.OrderByDescending(p => p.Alliance),
            "TroopType" => isAscending
                ? players.OrderBy(p => p.TroopType)
                : players.OrderByDescending(p => p.TroopType),
            "TroopLevel" => isAscending
                ? players.OrderBy(p => p.TroopLevel)
                : players.OrderByDescending(p => p.TroopLevel),
            "TroopCapacity" => isAscending
                ? players.OrderBy(p => p.TroopCapacity)
                : players.OrderByDescending(p => p.TroopCapacity),
            "RallySize" => isAscending
                ? players.OrderBy(p => p.RallySize)
                : players.OrderByDescending(p => p.RallySize),
            "MaxDenLevel" => isAscending
                ? players.OrderBy(p => p.MaxDenLevel)
                : players.OrderByDescending(p => p.MaxDenLevel),
            "PreferredShift" => isAscending
                ? players.OrderBy(p => p.PreferredShift)
                : players.OrderByDescending(p => p.PreferredShift),
            "IsParticipating" => isAscending
                ? players.OrderBy(p => p.IsParticipating)
                : players.OrderByDescending(p => p.IsParticipating),
            "LastUpdated" => isAscending
                ? players.OrderBy(p => p.LastUpdated)
                : players.OrderByDescending(p => p.LastUpdated),
            _ => players.OrderByDescending(p => p.LastUpdated)
        };
    }

    private void SortBy(string column)
    {
        if (currentSortColumn == column)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = true;
        }
        StateHasChanged();
    }
    private async Task ToggleParticipation(Player player, object? isChecked)
    {
        if (isChecked is bool isParticipating)
        {
            player.IsParticipating = isParticipating;
            player.LastUpdated = DateTime.UtcNow;
            await Db.SaveChangesAsync();
        }
    }

    private async Task ResetAllParticipation()
    {
        if (!await ShowConfirmation("Are you sure you want to reset all participation flags?"))
            return;

        foreach (var player in players)
        {
            player.IsParticipating = false;
            player.LastUpdated = DateTime.UtcNow;
        }

        await Db.SaveChangesAsync();
    }

    private async Task DeletePlayer(Player player)
    {
        playerToDelete = player;  // Store the player to delete
        if (!await ShowConfirmation($"Are you sure you want to delete {player.InGameName}? This action cannot be undone."))
        {
            playerToDelete = null;  // Clear if cancelled
            return;
        }

        Db.Players.Remove(playerToDelete);
        await Db.SaveChangesAsync();
        playerToDelete = null;  // Clear after deletion
        await RefreshPlayers();
    }

    private Task<bool> ShowConfirmation(string message)
    {
        confirmationMessage = message;
        isConfirmDialogVisible = true;
        confirmationTcs = new TaskCompletionSource<bool>();
        return confirmationTcs.Task;
    }
    private void CancelConfirmation()
    {
        isConfirmDialogVisible = false;
        confirmationTcs?.SetResult(false);
    }

    private void ConfirmAction()
    {
        isConfirmDialogVisible = false;
        confirmationTcs?.SetResult(true);
    }

    private async Task GenerateTeams()
    {
        try
        {
            var activePlayers = players.Where(p => p.IsParticipating).ToList();
            var assignments = GenerateAssignments(activePlayers);
            generatedAssignments = AssignmentFormatter.FormatAssignments(assignments);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            generatedAssignments = $"Error generating teams: {ex.Message}\n\nStack trace:\n{ex.StackTrace}";
            StateHasChanged();
        }
    }
    private async Task SaveAssignments()
    {
        if (string.IsNullOrWhiteSpace(generatedAssignments))
            return;

        try
        {
            // Deactivate all current assignments
            var currentAssignments = await Db.TeamAssignments.Where(ta => ta.IsActive).ToListAsync();
            foreach (var assignment in currentAssignments)
            {
                assignment.IsActive = false;
            }

            // Create new assignment
            var newAssignment = new TeamAssignment
                {
                    AssignmentText = generatedAssignments,
                    IsActive = true
                };

            Db.TeamAssignments.Add(newAssignment);
            await Db.SaveChangesAsync();

            currentAssignment = newAssignment;
            saveMessage = "Team assignments saved successfully!";
            saveMessageType = "success";
        }
        catch (Exception)
        {
            saveMessage = "Error saving team assignments.";
            saveMessageType = "danger";
        }
    }
    private async Task CopyInviteCode(string accessCode)
    {
        var text = $"Your code for CoL is {accessCode} and the URL is https://rb.gy/kdbdyg";
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }
    // Make these classes public so they can be accessed by AssignmentFormatter
    public class BuildingAssignment
    {
        public string Name { get; set; } = "";
        public bool IsHall => Name == "Hall";
        public Dictionary<int, RallyTeam> Shifts { get; set; } = new();
    }

    public class RallyTeam
    {
        public Player? Captain { get; set; }
        public TroopType TroopType => Captain?.TroopType ?? TroopType.Infantry;
        public int RallyCapacity => Captain?.RallySize ?? 0;
        public int UsedCapacity { get; set; }
        public List<(Player Player, int Troops)> Members { get; set; } = new();
    }

    private class TroopPool
    {
        public TroopType Type { get; set; }
        public int TotalCapacity { get; set; }
        public int AvailableCapacity { get; set; }
        public List<Player> AvailablePlayers { get; set; } = new();
    }

    private List<BuildingAssignment> GenerateAssignments(List<Player> allPlayers)
    {
        var troopPools = InitializeTroopPools(allPlayers);
        var assignments = new List<BuildingAssignment>();
        var usedPlayers = new HashSet<int>();
        var usedCaptainsByShift = new Dictionary<int, HashSet<int>>
    {
        { 1, new HashSet<int>() },
        { 2, new HashSet<int>() }
    };

        var buildings = new[] { "Hall", "North Spire", "South Spire", "East Spire", "West Spire" }
            .Select(name => new BuildingAssignment { Name = name })
            .ToList();

        // First, get all potential captains sorted by den level and rally size
        var potentialCaptainsByType = allPlayers
            .Where(p => p.IsWillingToCaptain)
            .GroupBy(p => p.TroopType)
            .ToDictionary(
                g => g.Key,
                g => g.OrderByDescending(p => p.MaxDenLevel)
                     .ThenByDescending(p => p.RallySize)
                     .ToList()
            );

        // Assign captains for each shift
        foreach (int shift in new[] { 1, 2 })
        {
            var buildingsNeedingCaptains = buildings.ToList();

            while (buildingsNeedingCaptains.Any())
            {
                // Get available captains for each troop type
                var availableCaptains = troopPools
                    .Select(pool => new
                    {
                        TroopType = pool.Key,
                        Captains = potentialCaptainsByType.GetValueOrDefault(pool.Key, new List<Player>())
                            .Where(p =>
                                !usedCaptainsByShift[shift].Contains(p.Id) &&
                                !usedPlayers.Contains(p.Id) &&
                                (p.PreferredShift == shift || p.PreferredShift == 3 || p.PreferredShift == 4))
                            .ToList()
                    })
                    .Where(x => x.Captains.Any())
                    .OrderByDescending(x => x.Captains.First().MaxDenLevel)
                    .ThenByDescending(x => x.Captains.First().RallySize)
                    .ToList();

                if (!availableCaptains.Any())
                {
                    throw new Exception($"No available captains for shift {shift}");
                }

                var bestCaptain = availableCaptains.First().Captains.First();
                var building = buildingsNeedingCaptains.First();

                building.Shifts[shift] = new RallyTeam { Captain = bestCaptain };
                buildingsNeedingCaptains.RemoveAt(0);

                // Update tracking
                usedCaptainsByShift[shift].Add(bestCaptain.Id);
                if (bestCaptain.PreferredShift != 3 && bestCaptain.PreferredShift != 4)
                {
                    usedPlayers.Add(bestCaptain.Id);
                }
                troopPools[bestCaptain.TroopType].AvailableCapacity -= bestCaptain.RallySize;
            }
        }

        // Assign troops to buildings
        AssignTroopsToBuildings(buildings, troopPools, usedPlayers);

        return buildings;
    }

    private Dictionary<TroopType, TroopPool> InitializeTroopPools(List<Player> players)
    {
        var pools = new Dictionary<TroopType, TroopPool>();

        foreach (TroopType type in Enum.GetValues(typeof(TroopType)))
        {
            var typePlayers = players.Where(p => p.TroopType == type && p.IsParticipating).ToList();
            pools[type] = new TroopPool
                {
                    Type = type,
                    TotalCapacity = typePlayers.Sum(p => p.TroopCapacity),
                    AvailableCapacity = typePlayers.Sum(p => p.TroopCapacity),
                    AvailablePlayers = typePlayers
                };
        }

        return pools;
    }

    private Player? FindBestCaptain(List<Player> availablePlayers, HashSet<int> usedPlayers, int shift)
    {
        // Get all potential captains before filtering
        var willingCaptains = availablePlayers
            .Where(p => p.IsWillingToCaptain)
            .ToList();

        // Get captains not already used
        var unusedCaptains = willingCaptains
            .Where(p => !usedPlayers.Contains(p.Id))
            .ToList();

        // Get captains available for this shift
        var shiftAvailableCaptains = unusedCaptains
            .Where(p => p.PreferredShift == shift ||
                        p.PreferredShift == 3 || // both shifts
                        p.PreferredShift == 4)   // any shift
            .ToList();

        // If we have no captains available for this specific shift but have unused captains,
        // consider all unused captains (emergency fallback)
        if (!shiftAvailableCaptains.Any() && unusedCaptains.Any())
        {
            shiftAvailableCaptains = unusedCaptains;
        }

        // Sort by priority
        var bestCaptain = shiftAvailableCaptains
            .OrderByDescending(p => p.MaxDenLevel)
            .ThenByDescending(p => p.RallySize)
            .FirstOrDefault();

        // Generate debug info - this will help identify where the filtering is too restrictive
        var debugInfo = $@"
Shift {shift} Captain Selection Debug:
Total willing captains: {willingCaptains.Count}
Unused captains: {unusedCaptains.Count}
Shift available captains: {shiftAvailableCaptains.Count}
Selected captain: {bestCaptain?.InGameName ?? "None"}";

        // If no captain found, store debug info in error message
        if (bestCaptain == null)
        {
            throw new Exception($"Unable to find captain for shift {shift}. Debug info: {debugInfo}");
        }

        return bestCaptain;
    }
    private void AssignTroopsToBuildings(
        List<BuildingAssignment> buildings,
        Dictionary<TroopType, TroopPool> troopPools,
        HashSet<int> usedPlayers)
    {
        // Track players used in each shift separately
        var usedPlayersByShift = new Dictionary<int, HashSet<int>>
    {
        { 1, new HashSet<int>() },
        { 2, new HashSet<int>() }
    };

        // First, mark all captains as used in their respective shifts
        foreach (var building in buildings)
        {
            foreach (var (shift, rally) in building.Shifts)
            {
                if (rally.Captain != null)
                {
                    usedPlayersByShift[shift].Add(rally.Captain.Id);
                    if (rally.Captain.PreferredShift != 3 && rally.Captain.PreferredShift != 4)
                    {
                        usedPlayers.Add(rally.Captain.Id); // Mark as used globally if not available for both shifts
                    }
                }
            }
        }

        // Assign Hall first
        var hall = buildings.First(b => b.IsHall);
        foreach (var (shift, rally) in hall.Shifts)
        {
            AssignTroopsToRally(rally, troopPools[rally.TroopType], usedPlayersByShift[shift], true);
        }

        // Then assign Spires
        foreach (var building in buildings.Where(b => !b.IsHall))
        {
            foreach (var (shift, rally) in building.Shifts)
            {
                AssignTroopsToRally(rally, troopPools[rally.TroopType], usedPlayersByShift[shift], false);
            }
        }
    }

    private void AssignTroopsToRally(
        RallyTeam rally,
        TroopPool pool,
        HashSet<int> usedPlayersInShift,
        bool isHall)
    {
        if (rally.Captain == null) return;

        // Get available players who haven't been used in this shift
        var availablePlayers = pool.AvailablePlayers
            .Where(p => !usedPlayersInShift.Contains(p.Id) &&
                        p.Id != rally.Captain.Id &&
                        p.TroopCapacity >= 10000)
            .OrderByDescending(p => isHall ? p.TroopLevel : p.TroopCapacity)
            .ThenByDescending(p => p.TroopCapacity)
            .ToList();

        foreach (var player in availablePlayers)
        {
            if (rally.UsedCapacity >= rally.RallyCapacity) break;

            var availableSpace = rally.RallyCapacity - rally.UsedCapacity;
            var assignedTroops = Math.Min(player.TroopCapacity, availableSpace);

            if (assignedTroops >= 10000)
            {
                rally.Members.Add((player, assignedTroops));
                rally.UsedCapacity += assignedTroops;
                pool.AvailableCapacity -= assignedTroops;
                usedPlayersInShift.Add(player.Id); // Mark as used for this shift
            }
        }
    }
    public static class AssignmentFormatter
    {
        public static string FormatAssignments(List<BuildingAssignment> assignments)
        {
            var sb = new StringBuilder();

            foreach (var building in assignments)
            {
                sb.AppendLine($"=== {building.Name} ===");

                foreach (var shift in building.Shifts.OrderBy(s => s.Key))
                {
                    FormatShift(sb, shift.Key, shift.Value);
                    sb.AppendLine();
                }

                if (building != assignments.Last())
                {
                    sb.AppendLine();
                }
            }

            return sb.ToString();
        }

        private static void FormatShift(StringBuilder sb, int shiftNumber, RallyTeam rally)
        {
            if (rally.Captain == null) return;

            sb.AppendLine($"Shift {shiftNumber}:");
            sb.AppendLine($"Captain: {FormatPlayerInfo(rally.Captain, rally.Captain.RallySize)}");

            if (rally.Members.Any())
            {
                sb.AppendLine("Members:");
                foreach (var (player, troops) in rally.Members.OrderByDescending(m => m.Troops))
                {
                    sb.AppendLine($"  {FormatPlayerInfo(player, troops)}");
                }
            }

            var utilizationPercent = rally.RallyCapacity > 0
                ? (rally.UsedCapacity * 100.0) / rally.RallyCapacity
                : 0;
            sb.AppendLine($"Rally Utilization: {rally.UsedCapacity:N0}/{rally.RallyCapacity:N0} ({utilizationPercent:F1}%)");
        }

        private static string FormatPlayerInfo(Player player, int troopCount)
        {
            return $"{player.InGameName} [{player.Alliance}] - T{player.TroopLevel} {player.TroopType} ({troopCount:N0})";
        }
    }
}